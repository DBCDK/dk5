#!groovyâ€‹
@Library('pu-deploy')_

def DOCKER_REPO_DBC = "docker-dbc.artifacts.dbccloud.dk"

properties([
        buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')),
        pipelineTriggers([]),
        disableConcurrentBuilds()
])

def BRANCH = BRANCH_NAME.toLowerCase().replaceAll(/[\/._ ]/, "-")
def INPUTFILE = "dk5_total.${BRANCH}.iso2709"
def OUTPUTFILE = "elastic_bulk_load.${BRANCH}.json"

pipeline {
    agent {
        docker {
            image "${DOCKER_REPO_DBC}/dbc-node:12"
            label "devel10-head"
            args  "-v /home/isworker:/home/isworker"
        }
    }
    triggers {
        upstream(upstreamProjects: "dk5/dk5-dump-libv3-data/master",
                threshold: hudson.model.Result.SUCCESS)
    }
    environment {
        ARTIFACTORY_DK5_DATA = "https://artifactory.dbccloud.dk/artifactory/docker-fbiscrum/dk5-data/"
        ARTIFACTORY_LOGIN = credentials("artifactory_login")
        TANTER_LOGIN = credentials("tanter_login")
    }

    stages {
        stage('Convert DK5 iso to json') {
            steps {
                script {
                    sh """
                        curl ${ARTIFACTORY_DK5_DATA}${INPUTFILE} >${INPUTFILE}
                        npm --version
                        node --version
                        npm install
                        src/iso2709ToElasticLoad -i ${INPUTFILE} -o ${OUTPUTFILE}
                    """
                }
            }
        }
        stage('Send file to Artifactory') {
            steps {
                script {
                    sh "echo archive ${OUTPUTFILE}"
                    archiveArtifacts "${OUTPUTFILE}"
                    sh "echo push to ${ARTIFACTORY_DK5_DATA}${OUTPUTFILE}"
                    sh "curl -k -u ${ARTIFACTORY_LOGIN} -T ${OUTPUTFILE} ${ARTIFACTORY_DK5_DATA}${OUTPUTFILE}"
                }
            }
        }
    }
    post {
        failure {
            when {branch "master"} {
                script {
                    slackSend(channel: 'fbi-frontend-is',
                            color: 'warning',
                            message: "${env.JOB_NAME} #${env.BUILD_NUMBER} failed and needs attention: ${env.BUILD_URL}",
                            tokenCredentialId: 'slack-global-integration-token')
                }
            }
        }
        success {
            script {
                if ("${env.BRANCH}" == 'master') {
                    slackSend(channel: 'fbi-frontend-is',
                            color: 'good',
                            message: "${env.JOB_NAME} #${env.BUILD_NUMBER} completed, and pushed ${OUTPUTFILE} to ${ARTIFACTORY_DK5_DATA}",
                            tokenCredentialId: 'slack-global-integration-token')
                }
            }
        }
        fixed {
            slackSend(channel: 'fbi-frontend-is',
                    color: 'good',
                    message: "${env.JOB_NAME} #${env.BUILD_NUMBER} back to normal: ${env.BUILD_URL}",
                    tokenCredentialId: 'slack-global-integration-token')

        }
    }
}
