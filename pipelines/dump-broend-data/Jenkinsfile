#!groovyâ€‹
@Library('pu-deploy')_

def DOCKER_REPO = "docker-fbiscrum.artifacts.dbccloud.dk"

properties([
        buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')),
        pipelineTriggers([]),
        disableConcurrentBuilds()
])

def BRANCH = BRANCH_NAME.toLowerCase().replaceAll(/[\/._ ]/, "-")
def OUTPUTFILE = "dk5_total.${BRANCH}.iso2709"

pipeline {
    agent {
        docker {
            image "${DOCKER_REPO}/dbc-broend-env:latest"
            label 'devel10-head'
        }
    }
    triggers {
        cron("H 5 * * *")
    }
    environment {
        ARTIFACTORY_DK5_DATA = "https://artifactory.dbccloud.dk/artifactory/docker-fbiscrum/dk5-data/"
        ARTIFACTORY_LOGIN = credentials("artifactory_login")
        TANTER_LOGIN = credentials("tanter_login")
        RAW_REPO = "http://rawrepo-record-service.basismig.svc.cloud.dbc.dk"
    }

    stages {
        stage('Dump DK5') {
            steps {
                script {
                    sh """
                        $HOME/.rrdump/bin/rrdump.sh -m EXPANDED -f ISO -a 190007 -e UTF-8 -u ${RAW_REPO} -o ${OUTPUTFILE}
                    """
                }
            }
        }
        stage('Send file to Artifactory') {
            when {
                branch "master"
            }
            steps {
                script {
                    sh "echo archive ${OUTPUTFILE}"
                    archiveArtifacts "${OUTPUTFILE}"
                    sh "echo push to ${ARTIFACTORY_DK5_DATA}${OUTPUTFILE}"
                    sh "curl -k -u ${ARTIFACTORY_LOGIN} -T ${OUTPUTFILE} ${ARTIFACTORY_DK5_DATA}${OUTPUTFILE}"
                }
            }
        }
    }
    post {
        failure {
            when {branch "master"} {
                script {
                    slackSend(channel: 'fbi-frontend-is',
                            color: 'warning',
                            message: "${env.JOB_NAME} #${env.BUILD_NUMBER} failed and needs attention: ${env.BUILD_URL}",
                            tokenCredentialId: 'slack-global-integration-token')
                }
            }
        }
        success {
            script {
                if ("${env.BRANCH}" == 'master') {
                    slackSend(channel: 'fbi-frontend-is',
                            color: 'good',
                            message: "${env.JOB_NAME} #${env.BUILD_NUMBER} completed, and pushed ${OUTPUTFILE} to ${ARTIFACTORY_DK5_DATA}",
                            tokenCredentialId: 'slack-global-integration-token')
                }
            }
        }
        fixed {
            slackSend(channel: 'fbi-frontend-is',
                    color: 'good',
                    message: "${env.JOB_NAME} #${env.BUILD_NUMBER} back to normal: ${env.BUILD_URL}",
                    tokenCredentialId: 'slack-global-integration-token')

        }
    }
}
